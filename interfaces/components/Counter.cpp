/*
 * Copyright (C) 2006-2020 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <Counter.h>

#include <yarp/os/idl/WireTypes.h>

class Counter_get_value_helper :
        public yarp::os::Portable
{
public:
    explicit Counter_get_value_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static std::int32_t s_return_helper;
};

thread_local std::int32_t Counter_get_value_helper::s_return_helper = {};

Counter_get_value_helper::Counter_get_value_helper()
{
    s_return_helper = {};
}

bool Counter_get_value_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_value", 1, 2)) {
        return false;
    }
    return true;
}

bool Counter_get_value_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readI32(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class Counter_increase_helper :
        public yarp::os::Portable
{
public:
    explicit Counter_increase_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;
};

Counter_increase_helper::Counter_increase_helper()
{
}

bool Counter_increase_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("increase", 1, 1)) {
        return false;
    }
    return true;
}

bool Counter_increase_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class Counter_decrease_helper :
        public yarp::os::Portable
{
public:
    explicit Counter_decrease_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;
};

Counter_decrease_helper::Counter_decrease_helper()
{
}

bool Counter_decrease_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("decrease", 1, 1)) {
        return false;
    }
    return true;
}

bool Counter_decrease_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class Counter_reset_helper :
        public yarp::os::Portable
{
public:
    explicit Counter_reset_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;
};

Counter_reset_helper::Counter_reset_helper()
{
}

bool Counter_reset_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("reset", 1, 1)) {
        return false;
    }
    return true;
}

bool Counter_reset_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

// Constructor
Counter::Counter()
{
    yarp().setOwner(*this);
}

std::int32_t Counter::get_value()
{
    Counter_get_value_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::int32_t Counter::get_value()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? Counter_get_value_helper::s_return_helper : std::int32_t{};
}

void Counter::increase()
{
    Counter_increase_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void Counter::increase()");
    }
    yarp().write(helper, helper);
}

void Counter::decrease()
{
    Counter_decrease_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void Counter::decrease()");
    }
    yarp().write(helper, helper);
}

void Counter::reset()
{
    Counter_reset_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void Counter::reset()");
    }
    yarp().write(helper, helper);
}

// help method
std::vector<std::string> Counter::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("get_value");
        helpString.emplace_back("increase");
        helpString.emplace_back("decrease");
        helpString.emplace_back("reset");
        helpString.emplace_back("help");
    } else {
        if (functionName == "get_value") {
            helpString.emplace_back("std::int32_t get_value() ");
        }
        if (functionName == "increase") {
            helpString.emplace_back("void increase() ");
        }
        if (functionName == "decrease") {
            helpString.emplace_back("void decrease() ");
        }
        if (functionName == "reset") {
            helpString.emplace_back("void reset() ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool Counter::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "get_value") {
            Counter_get_value_helper::s_return_helper = get_value();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeI32(Counter_get_value_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "increase") {
            increase();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "decrease") {
            decrease();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "reset") {
            reset();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
